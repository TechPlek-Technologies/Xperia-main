(function ($) {
  "use strict";

  window.mkAddons = {
    body: $("body"),
    html: $("html"),
    windowWidth: $(window).width(),
    windowHeight: $(window).height(),
    scroll: 0,
    window: $(window),
    widgetsList: {},
  };

  function initMkMovingProjects() {
    $(".mk-moving-projects").each(function () {
      var $holder = $(this);
      var holderId = $holder.attr("id");

      if (!$holder.data("initialized")) {
        initMovingProjectItem($holder, holderId);
        $holder.data("initialized", true);
      }
    });
  }

  function initMovingProjectItem($holder, $holder_id) {
    console.log("Initializing moving project item for holder ID:", $holder_id);
    try {
      if (typeof gsap === "undefined" || typeof ScrollTrigger === "undefined") {
        console.error("GSAP or ScrollTrigger is not defined.");
        return;
      }

      gsap.registerPlugin(ScrollTrigger);

      $holder_id = ".mk-moving-projects-" + $holder_id;

      const firstRow = document.querySelector(
        $holder_id +
          " .mk-moving-projects-holder .mk-moving-projects-images:first-of-type"
      );
      const secondRow = document.querySelector(
        $holder_id +
          " .mk-moving-projects-holder .mk-moving-projects-images:nth-of-type(2)"
      );
      const projectImage = document.querySelector(
        $holder_id +
          " .mk-moving-projects-holder .mk-moving-projects-images:first-of-type .mk-moving-projects-other-img"
      );
      const allImages = document.querySelectorAll(
        $holder_id + " .mk-moving-projects-holder .mk-moving-projects-images"
      );

      if (!firstRow || !secondRow || !projectImage) {
        console.error("Elements not found:", {
          firstRow,
          secondRow,
          projectImage,
        });
        return;
      }

      let imageWidth = projectImage.offsetWidth;
      let firstRowWidth = firstRow.getBoundingClientRect().left + imageWidth;
      let secondRowRight = secondRow.getBoundingClientRect().right - imageWidth;

      const movingProjectsAnim = gsap.timeline({
        scrollTrigger: {
          trigger: $holder_id + " .mk-moving-projects-holder",
          id: "clientPin",
          start: "top 20%",
          end: "bottom top",
          pin: $holder_id + ".mk-moving-projects",
          scrub: 1,
        },
      });

      movingProjectsAnim.to(firstRow, { x: -firstRowWidth, ease: "linear" });
      movingProjectsAnim.to(
        secondRow,
        { x: secondRowRight, ease: "linear" },
        "<"
      );

      // hover circle text change
      const projectInfo = document.querySelector(
        $holder_id + " .mk-moving-project-info"
      );
      const circleBg = projectInfo.querySelector(
        $holder_id + " .mk-moving-project-info-bg"
      );
      const iconImage = projectInfo.querySelector(
        $holder_id + " .stat-main-title span"
      );
      const imageItem = gsap.utils.toArray(
        $holder_id + " .mk-moving-projects-img"
      );
      const gsapAnim = gsap.timeline({ repeat: -1 });

      if (!projectInfo || !circleBg || !iconImage) {
        console.error("Hover elements not found:", {
          projectInfo,
          circleBg,
          iconImage,
        });
        return;
      }

      gsapAnim.to(iconImage, {
        duration: 0.3,
        scale: 1.3,
        delay: 0.5,
        ease: "power3.in",
      });
      gsapAnim.to(iconImage, { duration: 0.3, scale: 1, ease: "power3.out" });

      allImages.forEach((theImage) => {
        theImage.addEventListener("mouseenter", function () {
          gsap.to(circleBg, { scale: 1.1, duration: 1, ease: "elastic" });
        });
        theImage.addEventListener("mouseleave", function () {
          gsap.to(circleBg, { scale: 1, duration: 1, ease: "elastic" });
        });
      });

      imageItem.forEach((imageElements) => {
        imageElements.addEventListener("mouseenter", function () {
          const number = this.dataset.projectimage;
          const dataStat = document.querySelector(
            '[data-stat="' + number + '"]'
          );

          gsapAnim.pause();
          gsap.to(dataStat, {
            yPercent: -50,
            opacity: 1,
            scale: 1,
            duration: 0.4,
            ease: "power4",
          });
          iconImage.classList.add("invisible");
        });
        imageElements.addEventListener("mouseleave", function () {
          const number = this.dataset.projectimage;
          const dataStat = document.querySelector(
            '[data-stat="' + number + '"]'
          );

          gsap.to(dataStat, {
            yPercent: -50,
            opacity: 0,
            scale: 0.5,
            duration: 0.4,
            ease: "power4",
          });
          iconImage.classList.remove("invisible");
          gsapAnim.restart();
        });
      });
    } catch (error) {
      console.error("Error in initMovingProjectItem:", error);
    }
  }

  var mkScrollLoad = {
    init: function () {
      this.holder = $(".mk-scroll--load:not(.mk--loaded)");

      if (this.holder.length) {
        this.holder.each(function () {
          var holder = $(this),
            loadDelay = $(this).attr("data-appear-delay");

          if (!loadDelay) {
            mkScrollLoad.viewPortStatus(holder, function () {
              holder.addClass("mk--loaded");
            });
          } else {
            loadDelay =
              loadDelay === "random"
                ? Math.floor(Math.random() * (450 - 10) + 10)
                : loadDelay;
            mkScrollLoad.viewPortStatus(holder, function () {
              setTimeout(function () {
                holder.addClass("mk--loaded");
              }, loadDelay);
            });
          }
        });
      }
    },
    viewPortStatus: function ($item, callback, onlyOnce) {
      if ($item.length) {
        var offset =
          typeof $item.data("viewport-offset") !== "undefined"
            ? $item.data("viewport-offset")
            : 0.15;
        var observer = new IntersectionObserver(
          function (entries) {
            if (entries[0].isIntersecting === true) {
              callback.call($item);
              if (onlyOnce !== false) {
                observer.disconnect();
              }
            }
          },
          { threshold: [offset] }
        );
        observer.observe($item[0]);
      }
    },
  };

  function mkDualSliderInit() {
    var holder = $(".mk-dual-slider-swiper-container");

    if (holder.length) {
      holder.each(function () {
        var $holder = $(this),
          settings = $holder.data("settings") || {},
          pagination = $holder.siblings(".swiper-pagination").length
            ? $holder.siblings(".swiper-pagination")[0]
            : null;

        var swiperOptions = {
          direction: "horizontal",
          slidesPerView: 1,
          loop: true,
          speed: settings["speed"],
          effect: settings["effect"],
          pagination: { el: pagination, type: "bullets", clickable: true },
        };

        // autoplay
        if ("yes" === settings["autoplay"]) {
          swiperOptions.autoplay = {
            delay: settings["autoplay_speed"],
            disableOnInteraction: false,
          };
        }

        var $swiper = new Swiper($(this)[0], swiperOptions);
      });
    }
  }

  function mkDualSlider() {
    var $scope = $(document); // Assuming the whole document should be checked

    var $holder = $scope.find(".mk-dual-slider");

    mkScrollLoad.init();
    mkDualSliderInit();

    if ($holder.length) {
      $holder.each(function () {
        mkDualSliderSyncSwipers($(this));
        mkDualSliderSyncInfo($(this));
      });
    }

    function mkDualSliderSyncSwipers($thisHolder) {
      var mkLeftSwiper = $thisHolder.find(".mk-dual-slider-left"),
        mkRightSwiper = $thisHolder.find(".mk-dual-slider-right");

      if (mkLeftSwiper.length && mkRightSwiper.length) {
        var autoplay = $thisHolder.hasClass("mk-dual-slider-autoplay-yes");

        mkRightSwiper[0].swiper.autoplay.stop();
        mkLeftSwiper[0].swiper.autoplay.stop();
        mkRightSwiper[0].swiper.controller.control = mkLeftSwiper[0].swiper;
        mkRightSwiper[0].swiper.controller.by = "slide";
        mkRightSwiper[0].swiper.controller.inverse = true;
        mkLeftSwiper[0].swiper.controller.control = mkRightSwiper[0].swiper;

        if (autoplay) {
          mkRightSwiper[0].swiper.autoplay.start();
        }
      }
    }

    function mkDualSliderSyncInfo($thisHolder) {
      var mkLeftSwiper = $thisHolder.find(".mk-dual-slider-left"),
        contentToPopulate = $thisHolder.find(".mk-dual-slider-content-large"),
        contents = mkLeftSwiper.find(
          ".mk-dual-slider-item .mk-dual-slider-content"
        );

      mkDualSliderPopulateContent(mkLeftSwiper, contentToPopulate, contents);

      mkLeftSwiper[0].swiper.on("slideChangeTransitionStart", function () {
        setTimeout(function () {
          mkDualSliderPopulateContent(
            mkLeftSwiper,
            contentToPopulate,
            contents
          );
        }, 300);
      });
    }

    function mkDualSliderPopulateContent(
      mkLeftSwiper,
      contentToPopulate,
      contents
    ) {
      var activeIndex = mkLeftSwiper[0].swiper.activeIndex;

      if (contentToPopulate.length) {
        contentToPopulate.html(contents.eq(activeIndex).html());
      }
    }
  }

  $(document).ready(function () {
    mkAddons.scroll = $(window).scrollTop();
    console.log("Document ready. Initial scroll position:", mkAddons.scroll);

    mkScrollLoad.init();
    mkDualSlider();
  });

  $(window).resize(function () {
    mkAddons.windowWidth = $(window).width();
    mkAddons.windowHeight = $(window).height();
  });

  $(window).scroll(function () {
    mkAddons.scroll = $(window).scrollTop();
  });

  $(window).on("load", function () {
    mkScrollLoad.init();
    mkDualSlider(); // Ensure dual slider is initialized on load
    initMkMovingProjects(); // Ensure moving projects are initialized on load
  });

  mkAddons.widgetsList.mk_moving_projects = {
    mkMovingProjects: initMkMovingProjects,
  };
  mkAddons.widgetsList.mk_dual_slider = { mkDualSlider };

  $(window).on("elementor/frontend/init", function () {
    console.log("Elementor frontend initialized.");

    for (var key in mkAddons.widgetsList) {
      for (var keyChild in mkAddons.widgetsList[key]) {
        elementorFrontend.hooks.addAction(
          "frontend/element_ready/" + key + ".default",
          mkAddons.widgetsList[key][keyChild]
        );
      }
    }

    // Link 'Edit layout'
    jQuery(".mk_section_editor_link:not(.inited)")
      .addClass("inited")
      .on("click", function (e) {
        e.stopImmediatePropagation();
        return true;
      });
  });

  $(document).on("mk_trigger_get_new_posts", function () {
    if ($(".mk-portfolio-tooltip-box").length) {
      $(".mk-portfolio-tooltip-box").remove();
    }
    mkInfoFollow.init();
    mkGridItemLoad.init();
  });
})(jQuery);
