(function ($) {
  "use strict";

  window.mkAddons = {};
  mkAddons.body = $("body");
  mkAddons.html = $("html");
  mkAddons.windowWidth = $(window).width();
  mkAddons.windowHeight = $(window).height();
  mkAddons.scroll = 0;
  mkAddons.window = $(window);
  mkAddons.widgetsList = {};

  $(document).ready(function () {
    mkAddons.scroll = $(window).scrollTop();
    mkScrollLoad.init();
  });

  $(window).resize(function () {
    mkAddons.windowWidth = $(window).width();
    mkAddons.windowHeight = $(window).height();
  });

  $(window).scroll(function () {
    mkAddons.scroll = $(window).scrollTop();
  });

  $(window).on("load", function () {
    mkScrollLoad.init();
  });

  // on scroll loading animation class
  var mkScrollLoad = {
    init: function () {
      this.holder = $(".mk-scroll--load:not(.mk--loaded)");
  
      if (this.holder.length) {
        if ('IntersectionObserver' in window) {
          this.holder.each(function () {
            var holder = $(this),
              loadDelay = $(this).attr("data-appear-delay");
  
            if (!loadDelay) {
              mkScrollLoad.viewPortStatus(holder, function () {
                holder.addClass("mk--loaded");
              });
            } else {
              loadDelay =
                loadDelay === "random"
                  ? Math.floor(Math.random() * (450 - 10) + 10)
                  : loadDelay;
              mkScrollLoad.viewPortStatus(holder, function () {
                setTimeout(function () {
                  holder.addClass("mk--loaded");
                }, loadDelay);
              });
            }
          });
        } else {
          // Fallback for browsers that do not support IntersectionObserver
          this.holder.each(function () {
            var holder = $(this);
            // Immediately load the element if it's already in view
            if (holder.is(':in-viewport')) {
              holder.addClass("mk--loaded");
            } else {
              $(window).on('scroll', function() {
                if (holder.is(':in-viewport')) {
                  holder.addClass("mk--loaded");
                }
              });
            }
          });
        }
      }
    },
    viewPortStatus: function ($item, callback, onlyOnce) {
      if ($item.length) {
        var offset =
          typeof $item.data("viewport-offset") !== "undefined"
            ? $item.data("viewport-offset")
            : 0.15;
        var observer = new IntersectionObserver(
          function (entries) {
            if (entries[0].isIntersecting === true) {
              callback.call($item);
              if (onlyOnce !== false) {
                observer.disconnect();
              }
            }
          },
          { threshold: [offset] }
        );
        observer.observe($item[0]);
      }
    },
  };
  

  // Get saved content for panel or popup or store it (if first open occured)
  window.mk_prepare_popup_offcanvas_content = function (container, autoplay) {
    var wrapper = jQuery(container);
    // Store popup content to the data-param or restore it when popup open again (second time)
    // if popup contains audio or video or iframe
    if (wrapper.data("popup-content") === undefined) {
      var iframe = wrapper.find("iframe");
      if (
        wrapper.find("audio").length ||
        wrapper.find("video").length ||
        (iframe.length &&
          ((iframe.data("src") &&
            iframe.data("src").search(/(youtu|vimeo|daily|facebook)/i) > 0) ||
            iframe.attr("src").search(/(youtu|vimeo|daily|facebook)/i) > 0))
      ) {
        wrapper.data("popup-content", wrapper.html());
      }
    } else {
      wrapper.html(wrapper.data("popup-content"));
      // Remove class 'inited' to reinit elements
      wrapper.find(".inited").removeClass("inited");
    }
    // Replace src with data-src
    wrapper.find("[data-src]").each(function () {
      jQuery(this).attr("src", jQuery(this).data("src"));
    });

    // If popup contain essential grid
    var frame = wrapper.find(".esg-grid");
    if (frame.length > 0) {
      var wrappers = [
        ".esg-tc.eec",
        ".esg-lc.eec",
        ".esg-rc.eec",
        ".esg-cc.eec",
        ".esg-bc.eec",
      ];
      for (var i = 0; i < wrappers.length; i++) {
        frame.find(wrappers[i] + ">" + wrappers[i]).unwrap();
      }
    }
    // Call resize actions for the new content
    mkAddons.window.trigger("resize");
  };

  // ###########################################################
  // Custom Widgets ############################################
  // ###########################################################

  var mkScrollLoadAnim = function ($scope, $) {
    mkScrollLoad.init();
  };

  mkAddons.widgetsList.mk_title = {};
  mkAddons.widgetsList.mk_title.mkScrollLoadAnim = mkScrollLoadAnim;

  mkAddons.widgetsList.mk_section_heading = {};
  mkAddons.widgetsList.mk_section_heading.mkScrollLoadAnim = mkScrollLoadAnim;

  mkAddons.widgetsList.mk_page_titlebar = {};
  mkAddons.widgetsList.mk_page_titlebar.mkScrollLoadAnim = mkScrollLoadAnim;

  mkAddons.widgetsList.mk_dual_slider = {};
  mkAddons.widgetsList.mk_dual_slider.mkScrollLoadAnim = mkScrollLoadAnim;

  // Side bar Desktop----------------------------------------------------------

  var mkOffCanvas = function ($scope, $) {
    var $window = jQuery(window),
      $document = jQuery(document),
      $html = jQuery("html"),
      $body = jQuery("body"),
      $adminbar = jQuery("#wpadminbar"),
      _adminbar_height =
        $adminbar.length === 0 ||
        $adminbar.css("display") == "none" ||
        $adminbar.css("position") == "absolute"
          ? 0
          : $adminbar.height();

    // Off-Canvas content

    var on_leaving_site = [],
      in_page_edit_mode =
        $body.hasClass("elementor-editor-active") ||
        $body.hasClass("wp-admin") ||
        $body.hasClass("block-editor-page");

    // Init Off-Canvas links
    $body.find(".mk-off-canvas:not(.inited)").each(function () {
      var $self = jQuery(this),
        getOffCanvasId = $self.data("offcanvas-id"),
        esckey = $self.data("esckey"),
        show = false;
      if (!getOffCanvasId) return;

      $self.attr("id", getOffCanvasId); // add ID attribute

      // close offcanvas with escape key
      if ("yes" == esckey) {
        jQuery(document).on("keydown", function (event) {
          if (27 === event.keyCode) {
            mk_close_offcanvas($self);
          }
        });
      }

      var link = jQuery(
        'a[href="#' +
          getOffCanvasId +
          '"],' +
          ('.mk_off_canvas_link[data-offcanvas-id="' + getOffCanvasId + '"]')
      );

      if (link.length === 0) {
        $body.append(
          '<a href="#' + getOffCanvasId + '" class="mk_hidden"></a>'
        );
        link = jQuery('a[href="#' + getOffCanvasId + '"]');
      }

      link.addClass("mk_off_canvas_link").data("offcanvas", $self);

      $self
        .addClass("inited")
        .on("click", ".mk-off-canvas-close", function (e) {
          mk_close_offcanvas($self);
          e.preventDefault();
          return false;
        });
    }); // body.... .each

    // Open Off-Canvas on click on the off-canvas link
    $body
      .find(".mk_off_canvas_link:not(.offcanvas_inited)")
      .addClass("offcanvas_inited")
      .on("click", function (e) {
        console.log(jQuery(this));

        var offCanvas = jQuery(this).data("offcanvas");
        if (!offCanvas.hasClass("mk-off-canvas-active")) {
          mk_prepare_popup_offcanvas_content(offCanvas, true);
          offCanvas.addClass("mk-off-canvas-active");
          $document.trigger("action.opened_popup_elements", [offCanvas]);

          if (offCanvas.prev().hasClass("mk-off-canvas-overlay")) {
            offCanvas.prev().addClass("mk-off-canvas-active");
          }

          $body.addClass("mk-off-canvas-active");
        } else {
          mk_close_offcanvas(offCanvas);
        }
        e.preventDefault();
        return false;
      });

    // Close off-canvas on click on the modal cover
    $body
      .find(".mk-off-canvas-overlay:not(.inited)")
      .addClass("inited")
      .on("click", function (e) {
        mk_close_offcanvas(jQuery(this).next());
        e.preventDefault();
        return false;
      });

    // Close off-canvas
    window.mk_close_offcanvas = function (offCanvas) {
      setTimeout(function () {
        offCanvas.removeClass("mk-off-canvas-active");
        if (offCanvas.prev().hasClass("mk-off-canvas-overlay")) {
          offCanvas.prev().removeClass("mk-off-canvas-active");
        }

        $body.removeClass(
          "mk-off-canvas-active mk-off-canvas-active_left mk-off-canvas-active_right"
        );

        if (offCanvas.data("off-canvas-content") !== undefined) {
          setTimeout(function () {
            offCanvas.empty();
          }, 500);
        }
      }, 0);
    };
  };

  mkAddons.widgetsList.mk_off_canvas = {};
  mkAddons.widgetsList.mk_off_canvas.mkOffCanvas = mkOffCanvas;

  //end Side bar Desktop ----------------------------------------------------------

  //  Moving projects----------------------------------------------------------

  var mkMovingProjects = function ($scope, $) {
    var $holder = $scope.find(".mk-moving-projects");

    if ($holder.length && mkAddons.windowWidth > 1024) {
      gsap.defaults({ overwrite: "auto" });
      gsap.registerPlugin(ScrollTrigger);
      gsap.config({ nullTargetWarn: false });

      $holder.each(function () {
        let $thisHolder = $(this),
          $holder_id = $thisHolder.attr("id");
        initMovingPorjectItem($thisHolder, $holder_id);
      });
    }

    function initMovingPorjectItem($holder, $holder_id) {
      gsap.registerPlugin(ScrollTrigger);

      $holder_id = ".mk-moving-projects-" + $holder_id;

      const firstRow = document.querySelector(
          $holder_id +
            " .mk-moving-projects-holder .mk-moving-projects-images:first-of-type"
        ),
        secondRow = document.querySelector(
          $holder_id +
            " .mk-moving-projects-holder .mk-moving-projects-images:nth-of-type(2)"
        ),
        projectImage = document.querySelector(
          $holder_id +
            " .mk-moving-projects-holder .mk-moving-projects-images:first-of-type .mk-moving-projects-other-img"
        ),
        allImages = document.querySelectorAll(
          $holder_id + " .mk-moving-projects-holder .mk-moving-projects-images"
        );

      let imageWidth = projectImage.offsetWidth,
        firstRowWidth = firstRow.getBoundingClientRect().left + imageWidth,
        secondRowRight = secondRow.getBoundingClientRect().right - imageWidth;

      const movingProjectsAnim = gsap.timeline({
        scrollTrigger: {
          trigger: $holder_id + " .mk-moving-projects-holder",
          id: "clientPin",
          start: "top 20%",
          end: "bottom top",
          pin: $holder_id + ".mk-moving-projects",
          scrub: 1,
        },
      });

      movingProjectsAnim.to(firstRow, { x: -firstRowWidth, ease: "linear" }),
        movingProjectsAnim.to(
          secondRow,
          { x: secondRowRight, ease: "linear" },
          "<"
        );

      // hover circle text change
      const projectInfo = document.querySelector(
          $holder_id + " .mk-moving-project-info"
        ),
        circleBg = projectInfo.querySelector(
          $holder_id + " .mk-moving-project-info-bg"
        ),
        iconImage = projectInfo.querySelector(
          $holder_id + " .stat-main-title span"
        ),
        imageItem = gsap.utils.toArray($holder_id + " .mk-moving-projects-img"),
        gsapAnim = gsap.timeline({ repeat: -1 });

      gsapAnim.to(iconImage, {
        duration: 0.3,
        scale: 1.3,
        delay: 0.5,
        ease: "power3.in",
      }),
        gsapAnim.to(iconImage, { duration: 0.3, scale: 1, ease: "power3.out" }),
        allImages.forEach((theImage) => {
          theImage.addEventListener("mouseenter", function () {
            gsap.to(circleBg, { scale: 1.1, duration: 1, ease: "elastic" });
          }),
            theImage.addEventListener("mouseleave", function () {
              gsap.to(circleBg, { scale: 1, duration: 1, ease: "elastic" });
            });
        }),
        imageItem.forEach((imageElements) => {
          imageElements.addEventListener("mouseenter", function () {
            const number = this.dataset.projectimage,
              dataStat = document.querySelector('[data-stat="' + number + '"]');

            gsapAnim.pause(),
              gsap.to(dataStat, {
                yPercent: -50,
                opacity: 1,
                scale: 1,
                duration: 0.4,
                ease: "power4",
              }),
              iconImage.classList.add("invisible");
          }),
            imageElements.addEventListener("mouseleave", function () {
              const number = this.dataset.projectimage,
                dataStat = document.querySelector(
                  '[data-stat="' + number + '"]'
                );

              gsap.to(dataStat, {
                yPercent: -50,
                opacity: 0,
                scale: 0.5,
                duration: 0.4,
                ease: "power4",
              }),
                iconImage.classList.remove("invisible"),
                gsapAnim.restart();
            });
        });
    }
  };

  mkAddons.widgetsList.mk_moving_projects = {};
  mkAddons.widgetsList.mk_moving_projects.mkMovingProjects = mkMovingProjects;

  // end  Moving projects----------------------------------------------------------

  // Services Text----------------------------------------------------------

  var mkRevealServices = {
    init: function () {
      if (
        $("body").hasClass("elementor-editor-active") ||
        mkAddons.windowWidth < 1024
      ) {
        return;
      }

      let $holder = $(".mk-reveal-services-holder");

      if ($holder.length) {
        gsap.defaults({ overwrite: "auto" });
        gsap.registerPlugin(ScrollTrigger);
        gsap.config({ nullTargetWarn: false });

        $holder.each(function () {
          let $thisHolder = $(this);
          mkRevealServices.initItem($thisHolder);
        });
      }
    },
    initItem: function ($holder) {
      // 0 - Boxes Move right to left
      const tlBoxMove = gsap.timeline({
        scrollTrigger: {
          trigger: ".mk-reveal-service-one",
          start: "top 80%",
          end: "top 30%",
          scrub: 1,
        },
      });

      tlBoxMove
        .to(".mk-reveal-service-one", {
          x: "150vh",
          duration: 50,
          delay: 1,
          opacity: 1,
        })
        .to(".mk-reveal-service-two", {
          x: "150vh",
          duration: 50,
          delay: 2,
          opacity: 1,
        })
        .to(".mk-reveal-service-three", {
          x: "150vh",
          duration: 50,
          delay: 3,
          opacity: 1,
        })
        .to(".mk-reveal-service-four", {
          x: "150vh",
          duration: 50,
          delay: 4,
          opacity: 1,
        });
    },
  };

  mkAddons.widgetsList.mk_reveal_services = {};
  mkAddons.widgetsList.mk_reveal_services.mkRevealServices = mkRevealServices;

  $(document).ready(function () {
    mkRevealServices.init();
  });

  // ----------------------------------------------------------

  var mkInteractiveServices = function ($scope, $) {
    var thisHolder = $scope.find(".mk-interactive-services"),
      articles = thisHolder.find(".mk-itsr-item"),
      showcaseWallImages = thisHolder.find(".mk-itsr-images"),
      showcaseWallImage = thisHolder.find(".mk-itsr-image");

    if ($(window).width() >= 1024) {
      $(articles.get().reverse()).each(function () {
        if ($(this).hasClass("active-item")) {
          articles.removeClass("active-item");
          $(this).addClass("active-item");
        }
      });

      $(showcaseWallImage.get().reverse()).each(function () {
        if ($(this).hasClass("active-item")) {
          showcaseWallImage.removeClass("active-item");
          $(this).addClass("active-item");
        }
      });

      articles.each(function () {
        $(this).on({
          mouseenter: function () {
            articles.removeClass("active-item");
            $(this).addClass("active-item");
            showcaseWallImage.removeClass("active-item");
            showcaseWallImages
              .find("#" + $(this).data("index"))
              .addClass("active-item");
          },
          mouseleave: function () {},
        });
      });
    } else {
      articles.removeClass("active-item");
    }
  };

  mkAddons.widgetsList.mk_interactive_services = {};
  mkAddons.widgetsList.mk_interactive_services.mkInteractiveServices =
    mkInteractiveServices;

  // end Services Text----------------------------------------------------------

  //  Services Content----------------------------------------------------------

  var mkMovingServices = function ($scope, $) {
    var $holder = $scope.find(".mk-moving-services");

    if ($holder.length) {
      gsap.defaults({ overwrite: "auto" });
      gsap.registerPlugin(ScrollTrigger);
      gsap.config({ nullTargetWarn: false });

      $holder.each(function () {
        let $thisHolder = $(this);
        initMovingServicesItem($thisHolder);
      });
    }

    function initMovingServicesItem($holder) {
      gsap.registerPlugin(ScrollTrigger, SplitText);

      if (mkAddons.windowWidth > 1024) {
        let $holder_id = $holder.attr("id");

        const boxes = document.querySelector(
            "#" + $holder_id + " .mk-moving-services-items"
          ),
          boxesDiv = gsap.utils.toArray(
            "#" + $holder_id + " .mk-moving-services-items > div"
          ),
          boxesLeftDistance = boxes.getBoundingClientRect().left / 2;

        let boxLeftDistance = boxesDiv[0].getBoundingClientRect().left,
          i = 0;

        for (let x = 0; x < boxesDiv.length; x++) {
          i += boxesDiv[x].offsetWidth; // total width of all horizontal services items
        }

        i += $($holder).data("extra-length"); //  add extra length to match background text and scroll item scroll animation

        const holderDistance = -i + (window.innerWidth - 4 * boxesLeftDistance),
          boxAnimation = function () {
            const firstBoxDistance = boxesDiv[0].getBoundingClientRect().left,
              distance = firstBoxDistance - boxLeftDistance,
              finalDistance = Math.abs(Math.round(1.75 * distance) / 100),
              getDistance = Math.min(Math.max(finalDistance, 0), 1);
            gsap.to(boxesDiv, {
              scale: 1 - getDistance / 2,
            }),
              (boxLeftDistance = firstBoxDistance),
              requestAnimationFrame(boxAnimation);
          };
        boxAnimation(),
          gsap.to(boxesDiv, {
            scrollTrigger: {
              trigger: ".mk-moving-services",
              start: "top top",
              end: "bottom -=300%",
              toggleActions: "play none reverse none",
              scrub: !0,
            },
            x: holderDistance,
            ease: "linear",
          }),
          gsap.to(".mk-moving-services", {
            scrollTrigger: {
              trigger: ".mk-moving-services",
              id: "attScroll",
              start: "top top",
              end: "bottom -=290%",
              toggleActions: "play none reverse none",
              scrub: !0,
              pin: ".mk-moving-services",
            },
          });

        const defaultText = document.querySelector(
            "#" + $holder_id + ".mk-moving-services span:first-of-type"
          ),
          animText = document.querySelector(
            "#" + $holder_id + ".mk-moving-services span:nth-of-type(2)"
          );

        let splitText = new SplitText(animText, { type: "chars" }),
          splitTextAnim = gsap.timeline({
            scrollTrigger: {
              trigger: animText,
              start: "top 40%",
              end: "bottom -=280%",
              toggleActions: "play reverse play reverse",
              scrub: 0.2,
            },
          });
        splitTextAnim.from(splitText.chars, {
          y: (e) => 100 * e,
          duration: 1,
          ease: "linear",
        }),
          splitTextAnim.to(defaultText, {
            webkitClipPath: "inset(0% 0% 0% 0%)",
            duration: 3,
            ease: "linear",
          }),
          splitTextAnim.to(defaultText, {
            webkitClipPath: "inset(0% 100% 0% 0%)",
            duration: 5,
            ease: "linear",
          }),
          splitTextAnim.to(splitText.chars, {
            y: (e) => -100 * e - 550,
            duration: 1,
            ease: "linear",
          });
      }
    }
  };

  mkAddons.widgetsList.mk_moving_services = {};
  mkAddons.widgetsList.mk_moving_services.mkMovingServices = mkMovingServices;

  // end Services Content----------------------------------------------------------

  // Home Banner ----------------------------------------------------------

  function mkDualSliderInit() {
    var holder = $(".mk-dual-slider-swiper-container");

    if (holder.length) {
      holder.each(function () {
        var $holder = $(this),
          settings = $holder.data("settings") || {},
          pagination = $holder.siblings(".swiper-pagination").length
            ? $holder.siblings(".swiper-pagination")[0]
            : null;

        var swiperOptions = {
          direction: "horizontal",
          slidesPerView: 1,
          loop: true,
          speed: settings["speed"],
          effect: settings["effect"],
          pagination: { el: pagination, type: "bullets", clickable: true },
        };

        // autoplay
        if ("yes" === settings["autoplay"]) {
          swiperOptions.autoplay = {
            delay: settings["autoplay_speed"],
            disableOnInteraction: false,
          };
        }

        var $swiper = new Swiper($(this)[0], swiperOptions);
      });
    }
  }

  var mkDualSlider = function ($scope, $) {
    var $holder = $scope.find(".mk-dual-slider");

    mkScrollLoad.init();
    mkDualSliderInit();

    if ($holder.length) {
      $holder.each(function () {
        mkDualSliderSyncSwipers($(this));
        mkDualSliderSyncInfo($(this));
      });
    }

    function mkDualSliderSyncSwipers($thisHolder) {
      var mkLeftSwiper = $thisHolder.find(".mk-dual-slider-left"),
        mkRightSwiper = $thisHolder.find(".mk-dual-slider-right");

      if (mkLeftSwiper.length && mkRightSwiper.length) {
        var autoplay = $thisHolder.hasClass("mk-dual-slider-autoplay-yes");

        mkRightSwiper[0].swiper.autoplay.stop();
        mkLeftSwiper[0].swiper.autoplay.stop();
        mkRightSwiper[0].swiper.controller.control = mkLeftSwiper[0].swiper;
        mkRightSwiper[0].swiper.controller.by = "slide";
        mkRightSwiper[0].swiper.controller.inverse = true;
        mkLeftSwiper[0].swiper.controller.control = mkRightSwiper[0].swiper;

        if (autoplay) {
          mkRightSwiper[0].swiper.autoplay.start();
        }
      }
    }

    function mkDualSliderSyncInfo($thisHolder) {
      var mkLeftSwiper = $thisHolder.find(".mk-dual-slider-left"),
        contentToPopulate = $thisHolder.find(".mk-dual-slider-content-large"),
        contents = mkLeftSwiper.find(
          ".mk-dual-slider-item .mk-dual-slider-content"
        );

      mkDualSliderPopulateContent(mkLeftSwiper, contentToPopulate, contents);

      mkLeftSwiper[0].swiper.on("slideChangeTransitionStart", function () {
        //Timeout is safe here because it does not depend on anything apart from animation duration which is fixed value
        setTimeout(function () {
          mkDualSliderPopulateContent(
            mkLeftSwiper,
            contentToPopulate,
            contents
          );
        }, 300);
      });
    }

    function mkDualSliderPopulateContent(
      mkLeftSwiper,
      contentToPopulate,
      contents
    ) {
      var activeIndex = mkLeftSwiper[0].swiper.activeIndex;

      if (contentToPopulate.length) {
        contentToPopulate.html(contents.eq(activeIndex).html());
      }
    }
  };

  mkAddons.widgetsList.mk_dual_slider = {};
  mkAddons.widgetsList.mk_dual_slider.mkDualSlider = mkDualSlider;

  // end Home Banner----------------------------------------------------------

  // Testimonials ----------------------------------------------------------

  var mkTestimonialsSlider = function ($scope, $) {
    var testimonialsSlider = $scope
        .find(".mk-testimonials-slider-content")
        .eq(0),
      testimonialsSliderID = "#" + testimonialsSlider.attr("id"),
      $target = $(testimonialsSliderID).first();

    var settings = $target.data("settings") || {};

    var swiperOptions = {
      direction: "horizontal",
      slidesPerView: 1,
      loop: "yes" === settings["loop"],
      speed: settings["speed"],
      effect: "slide",
      keyboard: { enabled: true, onlyInViewport: true },
      mousewheel: "yes" === settings["mousewheel"],
      spaceBetween: 50,
      on: {
        resize: function () {
          defaultswiperObj.update();
        },
      },
    };

    if ("yes" === settings["autoplay"]) {
      swiperOptions.autoplay = { delay: settings["autoplay_speed"] };
      if (settings["pause_on_hover"]) {
        $(testimonialsSliderID).on("mouseenter", function () {
          defaultswiperObj.autoplay.stop();
        });
        $(testimonialsSliderID).on("mouseleave", function () {
          defaultswiperObj.autoplay.start();
        });
      }
    }

    if ("yes" === settings["arrows_on"]) {
      swiperOptions.navigation = {
        prevEl: settings["slider_prev"],
        nextEl: settings["slider_next"],
      };
    }
    if ("yes" === settings["dots"]) {
      swiperOptions.pagination = {
        el: settings["slider_pagination"],
        type: "bullets",
        clickable: true,
      };
    }

    var defaultswiperObj = new Swiper(testimonialsSliderID, swiperOptions);
  };

  mkAddons.widgetsList.mk_testimonials_slider = {};
  mkAddons.widgetsList.mk_testimonials_slider.mkTestimonialsSlider =
    mkTestimonialsSlider;

  // End Testimonials ---------------------------------------------

  // End Filterable Gallery ---------------------------------------------

  $(window).on("elementor/frontend/init", function () {
    for (var key in mkAddons.widgetsList) {
      for (var keyChild in mkAddons.widgetsList[key]) {
        elementorFrontend.hooks.addAction(
          "frontend/element_ready/" + key + ".default",
          mkAddons.widgetsList[key][keyChild]
        );
      }
    }

    // Link 'Edit layout'
    jQuery(".mk_section_editor_link:not(.inited)")
      .addClass("inited")
      .on("click", function (e) {
        e.stopImmediatePropagation();
        return true;
      });
  });
})(jQuery);